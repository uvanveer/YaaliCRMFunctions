string standalone.Books_Invoice_Association()
{
// booksOrgId = 666840843;
Get_Pagination_details = zoho.crm.getRecordById("Tag_syncing_schedule","3106252000107238517");
Page_Count = Get_Pagination_details.get("Function_Execution");
Page_Count = Page_Count.toLong();
Updated_Page_Count = Page_Count + 1;
Update_log = Map();
Update_log.put("Function_Execution",Updated_Page_Count.toString());
Get_Updated_Page = zoho.crm.updateRecord("Tag_syncing_schedule","3106252000107238517",Update_log);
info Get_Updated_Page;
Get_Identified_Invoices = zoho.crm.searchRecords("IdentifiedInvoices_Bills","(Invoice_Bill:equals:Invoices)",Page_Count,2);
info Get_Identified_Invoices;
for each  idt_rec in Get_Identified_Invoices
{
	Idt_map = idt_rec.toMap();
	new_check = Idt_map.get("New_Check");
	Inv_Updated = Idt_map.get("Inv_Updated");
	rec_id = Idt_map.get("id");
	Get_Invoice_Id = Idt_map.get("Bill_Invoice_Record_ID");
	if(new_check == true && Inv_Updated == false)
	{
		Get_Invoice_Id = 1324986000029399694;
		Get_Invoices = zoho.books.getRecordsByID("Invoices","666840843",Get_Invoice_Id);
		info Get_Invoices;
		Get_Sales_Orders = Get_Invoices.get("invoice").get("salesorders");
		info Get_Sales_Orders;
		if(Get_Sales_Orders.size() > 0)
		{
			Salesorder_Map = Get_Sales_Orders.toMap();
			Get_salesorder_Id = Salesorder_Map.get("salesorder_id");
			Get_Sales_Orderdetails = zoho.books.getRecordsByID("salesorders","666840843",Get_salesorder_Id);
			// 		info Get_Sales_Orderdetails;
			Get_Sales_Orders_Lineitems = Get_Sales_Orderdetails.get("salesorder").get("line_items");
			Salesorder_lineitem_size = Get_Sales_Orders_Lineitems.size();
			product_list = LIST();
			for each  rec_so in Get_Sales_Orders_Lineitems
			{
				rec_so_map = rec_so.toMAP();
				Get_item_rate = rec_so_map.get("rate");
				Get_item_Quantity = rec_so_map.get("quantity");
				Get_line_item_sku = rec_so_map.get("sku");
				SO_ItemId = rec_so_map.get("item_id");
				so_lineitem_id = rec_so_map.get("line_item_id");
				Get_Booksproduct_data = zoho.crm.searchRecords("Books_Items","(Books_Item_Id:equals:" + SO_ItemId + ")");
				// 			info "temp" + Get_Booksproduct_data;
				if(!isempty(Get_Booksproduct_data))
				{
					sales_account_id = "";
					Books_product_map = Get_Booksproduct_data.tomap();
					if(Books_product_map.containKey("Books_Account_Name"))
					{
						Get_product_salesaccount = Books_product_map.get("Books_Account_Name");
						if(Get_product_salesaccount == "SALES - USD")
						{
							sales_account_id = "1324986000024553072";
						}
						else if(Get_product_salesaccount == "SALES - CAD")
						{
							sales_account_id = "1324986000024553062";
						}
						else if(Get_product_salesaccount == "Sales - USD")
						{
							sales_account_id = "1324986000000063207";
						}
						else if(Get_product_salesaccount == "Sales - CAD")
						{
							sales_account_id = "1324986000000000388";
						}
						else if(Get_product_salesaccount == "Shipping Income - USD")
						{
							sales_account_id = "1324986000002462003";
						}
						else if(Get_product_salesaccount == "Shipping Income - CAD")
						{
							sales_account_id = "1324986000000014001";
						}
					}
				}
				Books_item_map = Map();
				Books_item_map.put("item_id",SO_ItemId);
				Books_item_map.put("line_item_id",so_lineitem_id);
				Books_item_map.put("quantity",Get_item_Quantity);
				Books_item_map.put("rate",Get_item_rate);
				Books_item_map.put("account_id",sales_account_id);
				product_list.add(Books_item_map);
			}
			Update_map = Map();
			Update_map.put("line_items",product_list);
			Update_invoice = zoho.books.updateRecord("Invoices","666840843",Get_Invoice_Id,Update_map);
			info Update_invoice;
			if(Update_invoice.size() > 0)
			{
				Get_updated_code = Update_invoice.get("code");
				if(Get_updated_code == "110701")
				{
					Update_map.put("reason","Updating the Chart Of accounts in Products Invoice");
					Update_invoice = zoho.books.updateRecord("Invoices","666840843",Get_Invoice_Id,Update_map);
					info Update_invoice;
				}
			}
			logMap = Map();
			logMap.put("Name","Books Invoices");
			logMap.put("SalesOrder_Record_ID",Get_Invoice_Id.toString());
			logMap.put("SalesOrder_Request",Update_map);
			logMap.put("SO_Workflow_Name","Update COA in Invoices");
			logMap.put("SalesOrder_Response",Update_invoice);
			end_time = now.toLong();
			logMap.put("Start_Time",end_time.toString());
			logMap.put("End_Time",end_time.toString());
			Create_log = zoho.crm.createRecord("Sales_Order_PO_Log",logMap);
			Update_custom_map = Map();
			Update_custom_map.put("Inv_Updated",true);
			Update_custom_data = zoho.crm.updateRecord("IdentifiedInvoices_Bills",rec_id,Update_custom_map);
		}
	}
	break;
}
// Deleting_Invoice = "https://books.zoho.com/api/v3/invoices/" +  + "?organization_id=666840843"
// if(invoice_count <= 0 && Order_Status == "Shipped" || invoice_count <= 0 && Order_Status == "Completed")
// {
// 	header = Map();
// 	header.put("authtoken","62821be1f52aaa5a1e3c658edba059cf");
// 	header.put("Content-Type","application/x-www-form-urlencoded;charset=UTF-8");
// 	converinvoice = postUrl("https://books.zoho.com/api/v3/invoices/fromsalesorder?organization_id=" + booksOrgId + "&salesorder_id=" + salesorderID,header);
// 	info "converinvoice:" + converinvoice;
// }
return "";
}